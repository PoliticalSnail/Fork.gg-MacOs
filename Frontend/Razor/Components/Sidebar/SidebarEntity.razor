@using ForkCommon.Model.Entity.Enums
@using ForkCommon.Model.Entity.Pocos
@using ForkFrontend.Logic.Services.Connections
@using ForkFrontend.Logic.Services.Managers
@using ForkFrontend.Logic.Services.Notifications
@using ForkFrontend.Razor.Components.Shared.Icons
@inject ILogger<SidebarEntity> Logger
@inject NotificationService NotificationService
@inject EntityConnectionService EntityConnectionService

<ContextMenu Id="@ContextMenuId">
    <ContextMenuItem OnClick="@DeleteEntity" Label="Delete"/>
</ContextMenu>

<div @oncontextmenu="OnSelectEntity">
    <ContextMenuTrigger MenuId="@ContextMenuId">
        <div
            class="@(IsSelected ? "bg-forkBlue-hover text-label-hover" : "text-label hover:text-label-hover") h-20 w-full flex items-center py-3 pl-5 gap-3 cursor-pointer"
            @onclick="OnSelectEntity">
            @* Status *@
            <StatusIndicator Status="Value.Entity.Status ?? EntityStatus.Stopped"></StatusIndicator>
            @* Icon TODO CKE *@
            @if (Value.Entity.Version?.Type == VersionType.Paper)
            {
                <PaperTypeIcon Width="24" Height="24"/>
            }
            @if (Value.Entity.Version?.Type == VersionType.Vanilla)
            {
                <VanillaTypeIcon Width="24" Height="24"/>
            }
            @if (Value.Entity.Version?.Type == VersionType.Waterfall)
            {
                <WaterfallTypeIcon Width="24" Height="24"/>
            }
            @if (Value.Entity.Version?.Type == VersionType.Purpur)
            {
                <PurpurTypeIcon Width="24" Height="24"/>
            }

            <!--span class="icon px-3 text-2xl">2</!--span-->

            @* Content *@
            <div class="flex-1">
                <p class="text-md">@Value.Entity.Name</p>
                @if (Value.Entity is Server server)
                {
                    <p class="text-sm">@(server.ServerPlayers.Count(p => p.IsOnline)) / @(server.VanillaSettings?.MaxPlayers ?? 0)</p>
                }
            </div>
            @* Selected Indicator *@
            <SelectedIndicatorVertical IsVisible="IsSelected" ParentHeight="72"
                                       NegativeYMargins="3">
            </SelectedIndicatorVertical>
        </div>
    </ContextMenuTrigger>
</div>

@code {

    [Parameter] [EditorRequired] public required EntityStateManager Value { get; set; }

    [Parameter] [EditorRequired] public required EventCallback<IEntity> OnClickCallback { get; set; }

    [Parameter] public bool IsSelected { get; set; }

    private string ContextMenuId => $"contextMenu-{Value.Entity.Id}";

    protected override Task OnInitializedAsync()
    {
        Value!.EntityStatusChangedNotificationHandler.After += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };
        Value!.UpdatePlayerNotificationHandler.After += _ =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };
        return base.OnInitializedAsync();
    }

    private async Task OnSelectEntity()
    {
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(Value?.Entity);
        }
    }

    private async Task DeleteEntity(ItemClickEventArgs e)
    {
        await EntityConnectionService.DeleteEntityAsync(Value.Entity);
    }

}
