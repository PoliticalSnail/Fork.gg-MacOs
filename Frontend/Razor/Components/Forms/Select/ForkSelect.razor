@typeparam TModelValue
@inherits AbstractForkInput<TModelValue>
@using ForkFrontend.Model.Forms
@implements IValueListInput<TModelValue, string>

<div class="mt-5">
    @if (Loading)
    {
        <div class="animate-pulse">
            <div class="bg-new-light_panel w-32 h-4 rounded mb-2"></div>
            <div class="bg-new-light_panel w-24 h-8 rounded"></div>
        </div>
    }
    else
    {
        <label for="@Name" class="text-new-offwhite text-md opacity-75">@Label</label>
        <div class="select-wrapper mt-1 ml-1 w-max">
            @* Good enough option for now. Replace with fully custom select in the future *@
            <InputSelect @bind-Value="SelectedHash" id="@Name"
                         class="appearance-none bg-new-light_panel py-1 px-5 text-new-offwhite">
                @foreach (ForkFormEntity<TModelValue, string> value in Values!)
                {
                    <option value="@value.ModelValue?.GetHashCode()">@value.ViewValue</option>
                }
            </InputSelect>
        </div>
    }
</div>

@code {
    [Parameter] public List<ForkFormEntity<TModelValue, string>>? Values { get; set; }
    [Parameter] public bool Loading { get; set; }

    private int? SelectedHash
    {
        get => CurrentValue?.GetHashCode();
        set
        {
            ForkFormEntity<TModelValue, string>? selectedValue = Values?.FirstOrDefault(x => x.ModelValue?.GetHashCode() == value);
            if (selectedValue != null)
            {
                CurrentValue = selectedValue.ModelValue;
            }
        }
    }

    protected override bool TryParseValueFromString(string? value, out TModelValue result, out string validationErrorMessage)
    {
        throw new NotSupportedException($"This component does not parse string inputs. Bind to the '{nameof(CurrentValue)}' property, not '{nameof(CurrentValueAsString)}'.");
    }

    /// <summary>
    ///     Override to make sure <see cref="Values" /> is set
    /// </summary>
    public override Task SetParametersAsync(ParameterView parameters)
    {
        Task result = base.SetParametersAsync(parameters);
        Values ??= new List<ForkFormEntity<TModelValue, string>>();
        return result;
    }

}