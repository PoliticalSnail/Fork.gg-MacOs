@using ForkCommon.Model.Application.Exceptions
@using ForkCommon.Model.Entity.Enums
@using ForkCommon.Model.Entity.Pocos
@using ForkCommon.Model.Payloads.Entity
@using ForkFrontend.Logic.Services.Connections
@using ForkFrontend.Logic.Services.Managers
@using ForkFrontend.Model.Enums
@using ForkFrontend.Model.Forms
@inherits AbstractScreenComponent

@inject EntityConnectionService EntityConnection;
@inject ApplicationStateManager ApplicationState;
@inject CreateEntityConnectionService CreateEntityConnection;

<div class="flex flex-col h-full">

    @* Main *@
    <EditForm Model="_serverPayload">
        <div class="flex-1 bg-new-panel max-w-5xl p-4 overflow-auto">
            <span class="text-lg font-bold ">Create A Server</span>
            <div class="px-4 pb-10">
                <div>
                    <ForkRadio Name="ServerType" @bind-Value="SelectedVersionType" TModelValue="VersionType"
                               Values="AvailableVersionTypes" RadioType="RadioType.ButtonRow" Label="Server Type"
                               LoadingByValue="@ServerVersionsLoadingTasksByType.Select(v => new KeyValuePair<VersionType, bool>(v.Key, true)).ToDictionary()">
                    </ForkRadio>
                </div>

                <div>
                    <ForkSelect Name="ServerVersion" @bind-Value="_serverPayload.ServerVersion"
                                TModelValue="ServerVersion" Loading="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)"
                                Values="Versions" Label="Choose Version">
                    </ForkSelect>
                </div>
            </div>

            <span class="text-lg font-bold">Configure Basic Settings</span>
            <div class="px-4 pb-10">
                <div class="flex gap-8">
                    <ForkText Name="ServerName" @bind-Value="_serverPayload.ServerName" Label="Server Name"
                              Loading="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)">
                    </ForkText>
                    <ForkText Name="ServerName" @bind-Value="_serverPayload.VanillaSettings.LevelName"
                              Loading="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)"
                              Label="World Name">
                    </ForkText>
                </div>
                <div class="flex gap-8">
                    <ForkSelect Name="Gamemode" @bind-Value="_serverPayload.VanillaSettings.CurrGamemode"
                                TModelValue="Gamemode"
                                Loading="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)"
                                Values="GetAvailableGameModes()" Label="Gamemode">
                    </ForkSelect>
                    <ForkSelect Name="Gamemode" @bind-Value="_serverPayload.VanillaSettings.CurrDifficulty"
                                TModelValue="Difficulty"
                                Loading="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)"
                                Values="GetAvailableDifficulties()" Label="Difficulty">
                    </ForkSelect>
                </div>
            </div>

            <IconButton Size="45" OnClickMethod="OnCreateEntity" IsDisabled="@ServerVersionsLoadingTasksByType.ContainsKey(SelectedVersionType)">
                <Icon>
                    <CreateIcon Height="24" Width="24"/>
                </Icon>
            </IconButton>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public required Func<ulong, Task> SelectEntityById { get; set; }

    private readonly CreateServerPayload _serverPayload = new();

    private List<ForkFormEntity<ServerVersion, string>>? Versions { get; set; } = new();
    private VersionType? _selectedVersionType;

    private VersionType SelectedVersionType
    {
        get => _selectedVersionType ?? VersionType.Vanilla;
        set
        {
            _selectedVersionType = value;
            SetVersionsForType(value);
        }
    }

    private bool VersionTypesLoading { get; set; }
    private Dictionary<VersionType, Task<List<ServerVersion>?>> ServerVersionsLoadingTasksByType { get; } = new();

    private List<ForkFormEntity<VersionType, string>>? AvailableVersionTypes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AvailableVersionTypes = await GetAvailableVersionTypes();
        _selectedVersionType = AvailableVersionTypes.First().ModelValue;
        Versions = await GetAvailableVersions(_selectedVersionType.Value);
    }

    private async Task OnCreateEntity(IconButton _)
    {
        ulong newEntityId = await ApplicationState.RunWithLoadingText(
            ErrorBoundary.RunSavely(EntityConnection.CreateServerAsync(_serverPayload)),
            "common.global.loading.creatingEntity");
        if (newEntityId == 0)
        {
            return;
        }

        await SelectEntityById(newEntityId);
    }

    private readonly Dictionary<VersionType, List<ServerVersion>> _cachedVersions = new();

    // TODO CKE make "Values" allow async enumerables properly
    // TODO CKE reload versions button (force reload from mojang,... server)
    private async Task<List<ForkFormEntity<ServerVersion, string>>> GetAvailableVersions(VersionType versionType)
    {
        if (!_cachedVersions.ContainsKey(versionType))
        {
            if (ServerVersionsLoadingTasksByType.ContainsKey(versionType))
            {
                // Already loading -> NOOP
                return MapVersionsToFormEntities(await ServerVersionsLoadingTasksByType[versionType] ?? []);
            }

            Task<List<ServerVersion>?> task = CreateEntityConnection.GetServerVersionsForType(versionType);
            ServerVersionsLoadingTasksByType[versionType] = task;
            StateHasChanged();

            List<ServerVersion>? versions = await task;

            _cachedVersions[versionType] = versions ?? throw new ForkException($"Failed to load available server versions for type {versionType}! Restart Fork and/or try again in a few minutes");

            ServerVersionsLoadingTasksByType.Remove(versionType);
            StateHasChanged();
        }

        return MapVersionsToFormEntities(_cachedVersions[versionType]);
    }

    private void SetVersionsForType(VersionType type)
    {
        Versions = null;
        Func<Task> task = async () =>
        {
            Versions = await GetAvailableVersions(type);
            _serverPayload.ServerVersion = Versions.First().ModelValue;
            StateHasChanged();
        };
        task();
    }

    private List<ForkFormEntity<ServerVersion, string>> MapVersionsToFormEntities(List<ServerVersion> versions)
    {
        return versions
            .Where(version => version.Version != null)
            .Select(version => new ForkFormEntity<ServerVersion, string>(version, version.Version!))
            .ToList();
    }

    private async Task<List<ForkFormEntity<VersionType, string>>> GetAvailableVersionTypes()
    {
        VersionTypesLoading = true;
        StateHasChanged();

        List<VersionType>? versionTypes = await CreateEntityConnection.GetAvailableVersionTypes();
        if (versionTypes == null)
        {
            throw new ForkException("Failed to load available server version types! Restart Fork and/or try again in a few minutes");
        }

        VersionTypesLoading = false;
        StateHasChanged();

        return versionTypes.Select(versionType => new ForkFormEntity<VersionType, string>(versionType, versionType.ToString())).ToList();
    }

    private List<ForkFormEntity<Gamemode, string>> GetAvailableGameModes()
    {
        List<ForkFormEntity<Gamemode, string>> result = new();
        foreach (Gamemode gameMode in _serverPayload.VanillaSettings.Gamemodes)
        {
            result.Add(new ForkFormEntity<Gamemode, string>(gameMode, gameMode.ToString()));
        }

        return result;
    }

    private List<ForkFormEntity<Difficulty, string>> GetAvailableDifficulties()
    {
        List<ForkFormEntity<Difficulty, string>> result = new();
        foreach (Difficulty difficulty in _serverPayload.VanillaSettings.Difficulties)
        {
            result.Add(new ForkFormEntity<Difficulty, string>(difficulty, difficulty.ToString()));
        }

        return result;
    }

}