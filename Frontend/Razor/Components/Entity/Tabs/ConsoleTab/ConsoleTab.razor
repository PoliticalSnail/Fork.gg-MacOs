@using ForkCommon.Model.Entity.Enums
@using ForkCommon.Model.Entity.Pocos
@using ForkCommon.Model.Notifications.EntityNotifications
@using ForkFrontend.Logic.Services.Managers
@inherits EntityTab
@inject ApplicationStateManager Application

<div class="flex-1 bg-new-panel flex gap-4 p-4 overflow-hidden">
    @* Center Part *@
    <div class="flex-1 flex flex-col gap-2">

        <div class="flex opacity-75 min-h-4 gap-6">
            @* IP *@
            <div class="flex items-center h-full text-sm gap-2">
                <GlobeIcon Width="16" Height="16"></GlobeIcon>
                <span class="monospace">@BuildIpString()</span>
            </div>

            @* Server Type *@
            <div class="flex items-center h-full text-sm gap-2">
                <CubeTransparentIcon Width="16" Height="16"></CubeTransparentIcon>
                <span class="monospace">@EntityState?.Entity.Version?.Type</span>
            </div>

            @* Server Type *@
            <div class="flex items-center h-full text-sm gap-2">
                <RestartAltIcon Width="16" Height="16"></RestartAltIcon>

                <span class="monospace">in 10h 1m</span>
            </div>
        </div>


        @* Console Out *@
        <ConsoleOut></ConsoleOut>

        @* Console In *@
        @if (EntityState?.Entity.Version?.IsEqualOrGreaterThan(ServerVersion.Version1_13) ?? false)
        {
            <ForkErrorBoundary FailSilently="true">
                <ChildContent>
                    <AutocompleteConsoleIn/>
                </ChildContent>
                <ErrorContent>
                    <ConsoleIn></ConsoleIn>
                </ErrorContent>
            </ForkErrorBoundary>
        }
        else
        {
            <ConsoleIn></ConsoleIn>
        }
    </div>

    @* Hardware Stats *@
    <div class="flex flex-col gap-4 overflow-auto scroll-hidden mt-7 items-center @(EntityState?.Entity.Status == EntityStatus.Stopped ? "opacity-20" : "")">

        <div class="flex flex-col w-24 items-center">
            <div class="flex items-center justify-center w-full bg-gradient-to-t from-percentage-p@(Math.Min(CpuPercentage - CpuPercentage % 10, 100))/10 to-percentage-p10/0 p-3 text-percentage-p@(Math.Min(CpuPercentage - CpuPercentage % 10, 100))">
                <span class="text-2xl font-bold">@CpuPercentage.ToString()</span>
                <span class="text-sm opacity-75">&nbsp%</span>
            </div>
            <div class="h-1 w-full bg-percentage-p@(Math.Min(CpuPercentage - CpuPercentage % 10, 100))"></div>
            <span class="text-sm opacity-75 mt-2">CPU</span>
        </div>

        <div class="flex flex-col w-24 items-center">
            <div class="flex items-center justify-center w-full bg-gradient-to-t from-percentage-p@(Math.Min(MemoryPercentage - MemoryPercentage % 10, 100))/10 to-percentage-p10/0 p-3 text-percentage-p@(Math.Min(MemoryPercentage - MemoryPercentage % 10, 100))">
                <span class="text-2xl font-bold">@MemoryPercentage.ToString()</span>
                <span class="text-sm opacity-75">&nbsp%</span>
            </div>
            <div class="h-1 w-full bg-percentage-p@(Math.Min(MemoryPercentage - MemoryPercentage % 10, 100))"></div>
            <span class="text-sm opacity-75 mt-2">RAM</span>
        </div>

        <div class="flex flex-col w-24 items-center">
            <div class="flex items-center justify-center w-full bg-gradient-to-t from-percentage-p0/10 to-percentage-p0/0 p-3 text-percentage-p0">
                <span class="text-2xl font-bold">@Uptime.TotalHours.ToString("0")</span>
                <span class="text-sm opacity-75">h</span>&nbsp
                <span class="text-2xl font-bold">@Uptime.Minutes.ToString("0")</span>
                <span class="text-sm opacity-75">m</span>&nbsp
            </div>
            <div class="h-1 w-full bg-percentage-p0"></div>
            <span class="text-sm opacity-75 mt-2">UPTIME</span>
        </div>

        @* <PerformanceMonitor Content="@CpuPercentage.ToString()" SubTitle="%" Name="CPU" ColorIntensity="@(Math.Min(CpuPercentage - CpuPercentage % 10, 100))"></PerformanceMonitor>
        <div class="performance-container">
            <PerformanceMonitor Content="@MemoryPercentage.ToString()" SubTitle="%" Name="RAM"
                                ColorIntensity="@(Math.Min(MemoryPercentage - MemoryPercentage % 10, 100))"></PerformanceMonitor>
            <div class="flex text-forkBlue-highlighted text-xs cursor-pointer">
                <span>2048 MB</span>
                <span class="leading-none ml-1">...</span>
            </div>
        </div>
        <PerformanceMonitor Content="@($"{Uptime.TotalHours:00}:{Uptime.Minutes:00}")" SubTitle="H:M" Name="UP<br>TIME" ColorIntensity="0"></PerformanceMonitor> *@
    </div>
</div>

@code {

    [CascadingParameter] public EntityStateManager? EntityState { get; set; }

    private int CpuPercentage { get; set; }
    private int MemoryPercentage { get; set; }
    private TimeSpan Uptime { get; set; } = TimeSpan.Zero;

    protected override void OnInitialized()
    {
        EntityState!.EntityPerformanceNotificationHandler.After += HandlePerformanceNotification;
    }

    private Task HandlePerformanceNotification(EntityPerformanceNotification performanceNotification)
    {
        CpuPercentage = (int)performanceNotification.CpuPercentage;
        MemoryPercentage = (int)performanceNotification.RamPercentage;
        Uptime = performanceNotification.Uptime;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string BuildIpString()
    {
        string ip = Application.ForkExternalIp;
        if (EntityState?.Entity is Server server)
        {
            return $"{ip}:{server.VanillaSettings?.ServerPort}";
        }

        // TODO Add network support
        // Network.Port;
        return ip;
    }

}